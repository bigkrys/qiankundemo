name: Docker Build & Deploy

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '23.6.0'

      - name: Set up pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Create .env file
        run: |
          echo "NGINX_SERVER_NAME=${{ secrets.NGINX_SERVER_NAME }}" >> .env
          echo "PORT=${{ secrets.PORT }}" >> .env
          echo "NODE_ENV=production" >> .env

      - name: Create .env file for subApp1
        run: |
          cd packages/subApp1
          echo "BASE_URL=/subApp1" >> .env
          echo "NODE_ENV=production" >> .env
          cd ../..

      - name: Create .env file for subApp2
        run: |
          cd packages/subApp2
          echo "BASE_URL=/subApp2" >> .env
          echo "NODE_ENV=production" >> .env
          cd ../..
      - name: Build shared utils
        run: |
          cd shared/utils
          pnpm build
          cd ../..

      - name: Build all applications
        run: pnpm build:apps

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_IMAGE_NAME }}

      - name: Deploy to Server
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # 设置环境变量
            export DOCKER_IMAGE_NAME="${{ secrets.DOCKER_IMAGE_NAME }}"
            export NGINX_SERVER_NAME="${{ secrets.NGINX_SERVER_NAME }}"
            export EXTERNAL_PORT="8888"
            export INTERNAL_PORT="8888"
            
            # 停止并删除旧容器
            echo "停止旧容器..."
            docker stop qiankun-app 2>/dev/null || true
            docker rm qiankun-app 2>/dev/null || true
            
            # 检查端口占用
            echo "检查端口占用情况..."
            if lsof -Pi :8888 -sTCP:LISTEN -t >/dev/null 2>&1; then
              echo "端口8888被占用，正在释放..."
              lsof -ti:8888 | xargs kill -9 2>/dev/null || true
              sleep 2
            fi
            
            # 拉取最新镜像
            echo "拉取镜像..."
            docker pull $DOCKER_IMAGE_NAME
            
            # 启动新容器
            echo "启动新容器..."
            docker run -d \
              --name qiankun-app \
              -p 8888:8888 \
              -e PORT=8888 \
              -e NGINX_SERVER_NAME="$NGINX_SERVER_NAME" \
              --restart unless-stopped \
              $DOCKER_IMAGE_NAME
            
            # 等待容器启动
            echo "等待容器启动..."
            sleep 10
            
            # 检查容器状态
            if docker ps | grep -q qiankun-app; then
              echo "✅ 容器启动成功!"
              echo "容器信息:"
              docker ps | grep qiankun-app
              echo "访问地址: http://$NGINX_SERVER_NAME:8888"
            else
              echo "❌ 容器启动失败!"
              echo "容器日志:"
              docker logs qiankun-app --tail 20
              exit 1
            fi
            
            # 健康检查
            echo "执行健康检查..."
            for i in {1..10}; do
              if curl -f http://localhost:8888/ >/dev/null 2>&1; then
                echo "✅ 健康检查通过!"
                break
              else
                echo "等待服务启动... ($i/10)"
                sleep 3
              fi
            done